export HOME=${HOME:-/c/Users/dufourz}

unset CURL_CA_BUNDLE
export POETRY_VIRTUALENVS_IN_PROJECT=true

# fzf
# export FZF_COMPLETION_DIR_COMMANDS="cd z pushd rmdir"
# export FZF_DEFAULT_COMMAND="rg --files --hidden --follow --glob '!.git'"
# export FZF_DEFAULT_OPTS="--cycle"
#
# export SKIM_DEFAULT_COMMAND="${FZF_DEFAULT_COMMAND?}"
# export SKIM_CTRL_T_COMMAND="${SKIM_DEFAULT_COMMAND?}"
# export SKIM_DEFAULT_OPTS=${FZF_DEFAULT_OPTS?}

if has most; then
    export PAGER=most
fi


# use neovim as default pager
export GIT_PAGER=delta

# enable awscli completion
export AWS_CLI_AUTO_PROMPT=partial


PATH_add "$HOME/Applications/WezTerm.app/Contents/MacOS"
PATH_add "$HOME/bin"
PATH_add "$HOME/.cargo/bin"
PATH_add "$HOME/.local/bin"
PATH_add "$HOME/.nix-profile/bin"
PATH_add /mingw64/bin
PATH_add "$HOME/scoop/shims"

GOROOT="$HOME/go"
GOPATH="$GOROOT/bin"
PATH_add "$GOPATH"

PATH_add "/usr/local/go/bin"

if has thefuck; then
    eval "$(thefuck --alias)"
fi

PATH_add /opt/local/bin
PATH_add /opt/local/sbin

setup_pyenv() {
	# if on windows, do nothing
	uname -s | grep -q 'MINGW' && return 0
	if [ -d "$HOME/.pyenv" ]; then
		export PYENV_ROOT=$HOME/.pyenv
	elif [ -d /home/linuxbrew/bin/.pyenv ]; then
		export PYENV_ROOT=/home/linuxbrew/bin/.pyenv
	fi

	# setup pyenv
}
setup_pyenv


# PUT this here
layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  local VENV=$(dirname $(poetry run which python))
  export VIRTUAL_ENV=$(echo "$VENV" | rev | cut -d'/' -f2- | rev)
  export POETRY_ACTIVE=1
  PATH_add "$VENV"
}

# Usage: layout uv
#
# Enables the uv project layout in the current directory, and syncs
# the dependencies in the project.
#
# This relies on the `uv` command being available in the PATH, and performs a
# sync on cd because uv is fast enough it's not impactful. It relies on uv's
# configuration file and environment variables, rather than arguments.
#
layout_uv() {
  # Watch the uv configuration file for changes
  watch_file .python-version pyproject.toml uv.lock

  # Use --frozen so that direnv entry does not change the lock contents. This
  # can fail if the lock file is badly out of sync, but it'll report that to the
  # user and the resolution is obvious.
  uv sync --frozen || true

  # activate the virtualenv after syncing; this puts the newly-installed
  # binaries on PATH.
  venv_path="$(expand_path "${UV_PROJECT_ENVIRONMENT:-.venv}")"
  if [[ -e $venv_path ]]; then
    # shellcheck source=/dev/null
    source "$venv_path/bin/activate"
  fi

}

PATH_add "$PYENV_ROOT/bin"
PATH_add "$PYENV_ROOT/shims"
PATH_add "${KREW_ROOT:-$HOME/.krew}/bin"
PATH_add "/usr/local/bin"
PATH_add "$HOME/.local/share/containers/podman-desktop/extensions-storage/podman-desktop.compose/bin/"
PATH_add "$HOME/.rd/bin"

export MANPAGER="nvim -c 'Man!'"
